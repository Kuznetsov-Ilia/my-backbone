server_name hopbox.ru test.hopbox.ru local.hopbox.ru hopbox.ddns.net;
set $www /var/www;
set $lua_page $www/backend/page;
set $lua_app $www/backend/app/init.lua;
set $lua_credentials $www/backend/app/credentials.lua;
set $lua_upload $www/backend/app/upload.lua;
root $www/public;
location = /index.html {
  add_header X-location index;
  ssi on;
}
location = /admin/index.html {
  add_header X-location admin;
  ssi on;
}
location / {
  ssi on;
  add_header X-location /;
  #ssi on;
  # Force the latest IE version
  add_header X-UA-Compatible IE=Edge;
  # The X-Frame-Options header indicates whether a browser should be allowed
  # to render a page within a frame or iframe.
  add_header X-Frame-Options SAMEORIGIN;
   
  # MIME type sniffing security protection
  # There are very few edge cases where you wouldn't want this enabled.
  add_header X-Content-Type-Options nosniff;
   
  # The X-XSS-Protection header is used by Internet Explorer version 8+
  # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
  add_header X-XSS-Protection "1; mode=block";
   
  # with Content Security Policy (CSP) enabled (and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # CSP can be quite difficult to configure, and cause real issues if you get it wrong
  # There is website that helps you generate a policy here http://cspisawesome.com/
  # add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' https://www.google-analytics.com;";
  try_files $uri $uri/index.html /index.html;
}
location /admin {
  ssi on;
  add_header X-location /admin;
  #ssi on;
  # Force the latest IE version
  add_header X-UA-Compatible IE=Edge;
  # The X-Frame-Options header indicates whether a browser should be allowed
  # to render a page within a frame or iframe.
  add_header X-Frame-Options SAMEORIGIN;
   
  # MIME type sniffing security protection
  # There are very few edge cases where you wouldn't want this enabled.
  add_header X-Content-Type-Options nosniff;
   
  # The X-XSS-Protection header is used by Internet Explorer version 8+
  # The header instructs IE to enable its inbuilt anti-cross-site scripting filter.
  add_header X-XSS-Protection "1; mode=block";
   
  # with Content Security Policy (CSP) enabled (and a browser that supports it (http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # CSP can be quite difficult to configure, and cause real issues if you get it wrong
  # There is website that helps you generate a policy here http://cspisawesome.com/
  # add_header Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self' https://www.google-analytics.com;";
  try_files $uri $uri/index.html /admin/index.html;
}

# location /admin {
#   add_header X-location /admin;
#   add_header "X-UA-Compatible" "IE=Edge";
#   add_header X-Frame-Options SAMEORIGIN;
#   add_header X-Content-Type-Options nosniff;
#   add_header X-XSS-Protection "1; mode=block";
#   try_files $uri $uri/index.html /admin/index.html;
# }
location = /404 {
  # This tells Nginx to cache open file handles, "not found" errors, metadata about files and their permissions, etc.
  #
  # The upside of this is that Nginx can immediately begin sending data when a popular file is requested,
  # and will also know to immediately send a 404 if a file is missing on disk, and so on.
  #
  # However, it also means that the server won't react immediately to changes on disk, which may be undesirable.
  #
  # In the below configuration, inactive files are released from the cache after 20 seconds, whereas
  # active (recently requested) files are re-validated every 30 seconds.
  #
  # Descriptors will not be cached unless they are used at least 2 times within 20 seconds (the inactive time).
  #
  # A maximum of the 1000 most recently used file descriptors can be cached at any time.
  #
  # Production servers with stable file collections will definitely want to enable the cache.
  open_file_cache          max=1000 inactive=20s;
  open_file_cache_valid    30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors   on;
  set $page 404;
  content_by_lua_file "$lua_page/404.lua";
}
location = /50x {
  set $page 500;
  content_by_lua_file "$lua_page/50x.lua";
}
location = /credentials {
  content_by_lua_file "$lua_credentials";
  default_type 'application/javascript';
}
location = /upload {
  content_by_lua_file "$lua_upload";
  default_type 'application/javascript';
}
location ~ ^/rest/(.+)$ {
  add_header X-location /rest;
  default_type 'application/javascript';
  expires -1;
  access_log logs/api.log;
  set $page 'rest';
  set $method $1;
  lua_need_request_body on;
  content_by_lua_file $lua_app;
}


# add_header Access-Control-Allow-Origin "*";
# add_header Access-Control-Allow-Methods "GET, PUT, POST, DELETE, OPTIONS";
# add_header Access-Control-Allow-Headers "*";
# add_header Access-Control-Allow-Credentials "true";
# if ($request_method = OPTIONS ) {
#   return 204;
# }
# set $r_method = $request_method;
# if ($http_access_control_request_method) {
#   set $r_method $http_access_control_request_method;
# }
