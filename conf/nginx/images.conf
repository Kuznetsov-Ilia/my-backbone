set $lua_resize $www/backend/app/resize.lua;

# Try get image from ceph, then from local cache, then from scaled by lua original
# If image test.png is original, when user wants test_30x30.png:
# 1) Try get it from ceph, if not exists
# 2) Try get it from /cache/t/es/test_30x30.png, if not exists
# 3) Resize original test.png and put it in /cache/t/es/test_30x30.ong
location ~ ^/(?<name>(?<first>.)(?<second>..)[^_]+)((?<size>_[^.]+)|)(?<ext>\.[a-zA-Z]*)$ {
  #proxy_intercept_errors on;
  #rewrite /([^/]+)$ /__CEPH_BUCKET__/$1 break;
  #proxy_pass __UPSTREAM__;
  error_page 404 403 = @local;
  error_log  logs/images.log warn;
}
# Helper failover location for upper command cause you can't write
# try_files __UPSTREAM__ /cache/$uri @resizer =404;
location @local {
  try_files /cache/$first/$second/$name$size$ext @resize;
}

# If scaled file not found in local cache resize it with lua magic!
location @resize {
# lua_code_cache off;
  content_by_lua_file "$lua_resize";
  error_log  logs/images-resize.log warn;
}

# serve scaled file, invoked in @resizer serve_image.lua
location @after_resize {
  try_files /cache/$first/$second/$name$size$ext =404;
  error_log  logs/images-after-resize.log warn;
}

# used in @resizer serve_image.lua to download original image
# $name contains original image file name
# location =/ceph_loader {
#   internal;
#   rewrite ^(.+)$ /__CEPH_BUCKET__/$name break;
#   proxy_set_header Cache-Control no-cache;
#   proxy_set_header If-Modified-Since "";
#   proxy_set_header If-None-Match "";
#   proxy_pass __UPSTREAM__;
# }

# location =/favicon.ico {
#   return 404;
# }

#location =/robots.txt {}
